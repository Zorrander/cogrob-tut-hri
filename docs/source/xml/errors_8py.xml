<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="errors_8py" kind="file" language="Python">
    <compoundname>errors.py</compoundname>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1Error" prot="public">franka_tut_reasoning::errors::Error</innerclass>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1RequestSyntax__Error" prot="public">franka_tut_reasoning::errors::RequestSyntax_Error</innerclass>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1RequestSemantic__Error" prot="public">franka_tut_reasoning::errors::RequestSemantic_Error</innerclass>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1TargetUnknown__Error" prot="public">franka_tut_reasoning::errors::TargetUnknown_Error</innerclass>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1LocationUnknown__Error" prot="public">franka_tut_reasoning::errors::LocationUnknown_Error</innerclass>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1WidthUnknown__Error" prot="public">franka_tut_reasoning::errors::WidthUnknown_Error</innerclass>
    <innerclass refid="classfranka__tut__reasoning_1_1errors_1_1Grasping__Error" prot="public">franka_tut_reasoning::errors::Grasping_Error</innerclass>
    <innernamespace refid="namespacefranka__tut__reasoning_1_1errors">franka_tut_reasoning::errors</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Errors<sp/>module.</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">Are<sp/>defined<sp/>here<sp/>the<sp/>errors<sp/>for<sp/>the<sp/>reasoning<sp/>module</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="classfranka__tut__reasoning_1_1errors_1_1Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfranka__tut__reasoning_1_1errors_1_1Error" kindref="compound">Error</ref>(Exception):</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Base<sp/>class<sp/>for<sp/>exceptions<sp/>in<sp/>this<sp/>module.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classfranka__tut__reasoning_1_1errors_1_1RequestSyntax__Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RequestSyntax_Error(Error):</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Exception<sp/>raised<sp/>when<sp/>the<sp/>request<sp/>cannot<sp/>be<sp/>matched<sp/>to<sp/>any<sp/>utterance<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>symbol):</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.value<sp/>=<sp/>symbol</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>sorry,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>match<sp/>with<sp/>any<sp/>result&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classfranka__tut__reasoning_1_1errors_1_1RequestSemantic__Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfranka__tut__reasoning_1_1errors_1_1RequestSemantic__Error" kindref="compound">RequestSemantic_Error</ref>(<ref refid="classfranka__tut__reasoning_1_1errors_1_1Error" kindref="compound">Error</ref>):</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Exception<sp/>raised<sp/>when<sp/>the<sp/>request<sp/>can<sp/>be<sp/>matched<sp/>to<sp/>several<sp/>utterances<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1RequestSemantic__Error_1a8d54911592078c4fc76040085aa79103" kindref="member">message</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>sorry,<sp/>the<sp/>request<sp/>matches<sp/>with<sp/>more<sp/>than<sp/>one<sp/>result&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classfranka__tut__reasoning_1_1errors_1_1TargetUnknown__Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfranka__tut__reasoning_1_1errors_1_1TargetUnknown__Error" kindref="compound">TargetUnknown_Error</ref>(<ref refid="classfranka__tut__reasoning_1_1errors_1_1Error" kindref="compound">Error</ref>):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Exception<sp/>raised<sp/>when<sp/>one<sp/>of<sp/>the<sp/>attribute<sp/>of<sp/>the<sp/>request<sp/>is<sp/>not<sp/>known<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>symbol):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1TargetUnknown__Error_1ac14a5e4835de67450016182e76c4ee0e" kindref="member">value</ref><sp/>=<sp/>symbol</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1TargetUnknown__Error_1aa3132a50ff004562b83d2bdaea7586f5" kindref="member">message</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>explain<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>another<sp/>way&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classfranka__tut__reasoning_1_1errors_1_1LocationUnknown__Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfranka__tut__reasoning_1_1errors_1_1LocationUnknown__Error" kindref="compound">LocationUnknown_Error</ref>(<ref refid="classfranka__tut__reasoning_1_1errors_1_1Error" kindref="compound">Error</ref>):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Exception<sp/>raised<sp/>when<sp/>the<sp/>action<sp/>requires<sp/>a<sp/>motion<sp/>to<sp/>un<sp/>undefined<sp/>location<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>symbol):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1LocationUnknown__Error_1a7307cc36ae2defbd2c807c6fbab677ff" kindref="member">message</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>tell<sp/>me<sp/>where<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classfranka__tut__reasoning_1_1errors_1_1WidthUnknown__Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfranka__tut__reasoning_1_1errors_1_1WidthUnknown__Error" kindref="compound">WidthUnknown_Error</ref>(<ref refid="classfranka__tut__reasoning_1_1errors_1_1Error" kindref="compound">Error</ref>):</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Exception<sp/>raised<sp/>when<sp/>the<sp/>width<sp/>of<sp/>the<sp/>object<sp/>to<sp/>grasp<sp/>is<sp/>not<sp/>know<sp/>is<sp/>not<sp/>known<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>symbol):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1WidthUnknown__Error_1aee0fdd22b613b58a9d299a363c54c0cd" kindref="member">value</ref><sp/>=<sp/>symbol</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1WidthUnknown__Error_1ad02cf3ac2a223bb59f0c47891e54d9e2" kindref="member">message</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>not<sp/>sure<sp/>if<sp/>I<sp/>can<sp/>grasp<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>because<sp/>I<sp/>don&apos;t<sp/>know<sp/>the<sp/>width&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classfranka__tut__reasoning_1_1errors_1_1Grasping__Error" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfranka__tut__reasoning_1_1errors_1_1Grasping__Error" kindref="compound">Grasping_Error</ref>(<ref refid="classfranka__tut__reasoning_1_1errors_1_1Error" kindref="compound">Error</ref>):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Exception<sp/>raised<sp/>when<sp/>the<sp/>width<sp/>of<sp/>the<sp/>object<sp/>to<sp/>grasp<sp/>is<sp/>superior<sp/>to<sp/>the<sp/>maximum<sp/>width<sp/>of<sp/>the<sp/>gripper<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>symbol):</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1Grasping__Error_1aceaa6a19f3214c890356bdce7ddeb219" kindref="member">value</ref><sp/>=<sp/>symbol</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classfranka__tut__reasoning_1_1errors_1_1Grasping__Error_1a8e0d37d13d321c9434d38153d6e59d73" kindref="member">message</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>cannot<sp/>grasp&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>it<sp/>is<sp/>too<sp/>wide<sp/>for<sp/>my<sp/>current<sp/>gripper&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="franka_tut_reasoning/src/franka_tut_reasoning/errors.py"/>
  </compounddef>
</doxygen>
